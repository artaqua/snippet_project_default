/*============================
=            GRID            =
============================*/

vendors ?= official

percentage($n)
  if $n == 0
    0
  else
    unit($n * 100, "%")


//
// Utility classes
// --------------------------------------------------


// Floats
// -------------------------

.clearfix
  clearfix()

.center-block
  center-block()

.pull-right
  float right !important

.pull-left
  float left !important


// Responsive utilities

//
// More easily include all the states for responsive-utilities.
responsive-visibility()
  display block !important

  table&
    display table

  tr&
    display table-row !important

  th&,
  td&
    display table-cell !important

responsive-invisibility()
  display none !important

// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
// contenteditable attribute is included anywhere else in the document.
// Otherwise it causes space to appear at the top and bottom of elements
// that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
// `:before` to contain the top-margins of child elements.
//
// Source http://nicolasgallagher.com/micro-clearfix-hack/
clearfix()
  &:before,
  &:after
    content " " // 1
    display table // 2

  &:after
    clear both

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid $classes given
// any value of `$grid-columns`.
make-grid-columns()
  $col
    position relative
    // Prevent columns from collapsing when empty
    min-height 1px
    // Inner gutter via padding
    padding-left ($grid-gutter-width / 2)
    padding-right ($grid-gutter-width / 2)

  // Common styles for all sizes of grid columns, widths 1-12
  for $index in 1..$grid-columns
    .col-xs-{$index}, .col-sm-{$index}, .col-md-{$index}, .col-lg-{$index}
      @extend $col

float-grid-columns($class)
  $col-float-{$class}
    float left

  for $index in 1..$grid-columns
    .col-{$class}-{$index}
      @extend $col-float-{$class}

calc-grid-column($index, $class, $type)
  if $type == width and $index > 0
    .col-{$class}-{$index}
      width percentage(($index / $grid-columns))
  else if $type == push
    if $index == 0
      .col-{$class}-push-0
        left auto
    else
      .col-{$class}-push-{$index}
        left percentage(($index / $grid-columns))
  else if $type == pull
    if $index == 0
      .col-{$class}-pull-0
        right auto
    else
      .col-{$class}-pull-{$index}
        right percentage(($index / $grid-columns))
  else if $type == offset
    .col-{$class}-offset-{$index}
      margin-left percentage(($index / $grid-columns))

loop-grid-columns($grid-columns, $class, $type)
  for $index in $grid-columns..0
    calc-grid-column($index, $class, $type)

// Create grid for specific $class
make-grid($class)
  float-grid-columns($class)
  loop-grid-columns($grid-columns, $class, width)
  loop-grid-columns($grid-columns, $class, pull)
  loop-grid-columns($grid-columns, $class, push)
  loop-grid-columns($grid-columns, $class, offset)

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
container-fixed($gutter = $grid-gutter-width)
  margin-right auto
  margin-left auto
  padding-left ($gutter / 2)
  padding-right ($gutter / 2)
  @extend .clearfix

// Creates a wrapper for a series of columns
make-row($gutter = $grid-gutter-width)
  margin-left ($gutter / -2)
  margin-right ($gutter / -2)
  @extend .clearfix

// Generate the extra small columns
make-xs-column($columns, $gutter = $grid-gutter-width)
  position relative
  float left
  width percentage(($columns / $grid-columns))
  min-height 1px
  padding-left ($gutter / 2)
  padding-right ($gutter / 2)

make-xs-column-offset($columns)
  margin-left percentage(($columns / $grid-columns))

make-xs-column-push($columns)
  left percentage(($columns / $grid-columns))

make-xs-column-pull($columns)
  right percentage(($columns / $grid-columns))

// Generate the small columns
make-sm-column($columns, $gutter = $grid-gutter-width)
  position relative
  min-height 1px
  padding-left ($gutter / 2)
  padding-right ($gutter / 2)

  @media (min-width $screen-sm-min)
    float left
    width percentage(($columns / $grid-columns))

make-sm-column-offset($columns)
  @media (min-width $screen-sm-min)
    margin-left percentage(($columns / $grid-columns))

make-sm-column-push($columns)
  @media (min-width $screen-sm-min)
    left percentage(($columns / $grid-columns))

make-sm-column-pull($columns)
  @media (min-width $screen-sm-min)
    right percentage(($columns / $grid-columns))

// Generate the medium columns
make-md-column($columns, $gutter = $grid-gutter-width)
  position relative
  min-height 1px
  padding-left ($gutter / 2)
  padding-right ($gutter / 2)

  @media (min-width $screen-md-min)
    float left
    width percentage(($columns / $grid-columns))

make-md-column-offset($columns)
  @media (min-width $screen-md-min)
    margin-left percentage(($columns / $grid-columns))

make-md-column-push($columns)
  @media (min-width $screen-md-min)
    left percentage(($columns / $grid-columns))

make-md-column-pull($columns)
  @media (min-width $screen-md-min)
    right percentage(($columns / $grid-columns))

// Generate the large columns
make-lg-column($columns, $gutter = $grid-gutter-width)
  position relative
  min-height 1px
  padding-left ($gutter / 2)
  padding-right ($gutter / 2)

  @media (min-width $screen-lg-min)
    float left
    width percentage(($columns / $grid-columns))

make-lg-column-offset($columns)
  @media (min-width $screen-lg-min)
    margin-left percentage(($columns / $grid-columns))

make-lg-column-push($columns)
  @media (min-width $screen-lg-min)
    left percentage(($columns / $grid-columns))

make-lg-column-pull($columns)
  @media (min-width $screen-lg-min)
    right percentage(($columns / $grid-columns))


//////////////////////////////////////////////////////////////// @import "grid"
//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container
  container-fixed()

  @media (min-width $screen-sm-min)
    width $container-sm
  @media (min-width $screen-md-min)
    width $container-md
  @media (min-width $screen-lg-min)
    width $container-lg


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid
  container-fixed()


// Row
//
// Rows contain and clear the floats of your columns.

.row
  make-row()


// Columns
//
// Common styles for small and large grid columns

make-grid-columns()


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

make-grid(xs)


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width $screen-sm-min)
  make-grid(sm)


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width $screen-md-min)
  make-grid(md)


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width $screen-lg-min)
  make-grid(lg)

//////////////////////////////////////////////////////////////// @import "utillties"




// Toggling content
// -------------------------

// Note Deprecated .hide in favor of .hidden or .sr-only (as appropriate) in v3.0.1
.hide
  display none !important

.show
  display block !important

.invisible
  visibility hidden

.text-hide
  text-hide()


// Hide from screenreaders and browsers
//
// Credit HTML5 Boilerplate

.hidden
  display none !important


// For Affix plugin
// -------------------------

.affix
  position fixed

//////////////////////////////////////////////////////////////// @import "responsive-utillties"

//
// Responsive Utility classes
// --------------------------------------------------


// IE10 in Windows (Phone) 8
//
// Support for responsive views via media queries is kind of borked in IE10, for
// Surface/desktop in split view and for Windows Phone 8. This particular fix
// must be accompanied by a snippet of JavaScript to sniff the user agent and
// apply some conditional CSS to *only* the Surface/desktop Windows 8. Look at
// our Getting Started page for more information on this bug.
//
// For more information, see the following:
//
// Issue https://github.com/twbs/bootstrap/issues/10497
// Docs http://getbootstrap.com/getting-started/#support-ie10-width
// Source http://timkadlec.com/2013/01/windows-phone-8-and-device-width/
// Source http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/

@-ms-viewport
  width device-width

// Visibility utilities
// Note Deprecated .visible-xs, .visible-sm, .visible-md, and .visible-lg as of v3.2.0
.visible-xs,
.visible-sm,
.visible-md,
.visible-lg
  responsive-invisibility()

.visible-xs-block,
.visible-xs-inline,
.visible-xs-inline-block,
.visible-sm-block,
.visible-sm-inline,
.visible-sm-inline-block,
.visible-md-block,
.visible-md-inline,
.visible-md-inline-block,
.visible-lg-block,
.visible-lg-inline,
.visible-lg-inline-block
  display none !important

.visible-xs
  @media (max-width $screen-xs-max)
    responsive-visibility()

.visible-xs-block
  @media (max-width $screen-xs-max)
    display block !important

.visible-xs-inline
  @media (max-width $screen-xs-max)
    display inline !important

.visible-xs-inline-block
  @media (max-width $screen-xs-max)
    display inline-block !important

.visible-sm
  @media (min-width $screen-sm-min) and (max-width $screen-sm-max)
    responsive-visibility()

.visible-sm-block
  @media (min-width $screen-sm-min) and (max-width $screen-sm-max)
    display block !important

.visible-sm-inline
  @media (min-width $screen-sm-min) and (max-width $screen-sm-max)
    display inline !important

.visible-sm-inline-block
  @media (min-width $screen-sm-min) and (max-width $screen-sm-max)
    display inline-block !important

.visible-md
  @media (min-width $screen-md-min) and (max-width $screen-md-max)
    responsive-visibility()

.visible-md-block
  @media (min-width $screen-md-min) and (max-width $screen-md-max)
    display block !important

.visible-md-inline
  @media (min-width $screen-md-min) and (max-width $screen-md-max)
    display inline !important

.visible-md-inline-block
  @media (min-width $screen-md-min) and (max-width $screen-md-max)
    display inline-block !important

.visible-lg
  @media (min-width $screen-lg-min)
    responsive-visibility()

.visible-lg-block
  @media (min-width $screen-lg-min)
    display block !important

.visible-lg-inline
  @media (min-width $screen-lg-min)
    display inline !important

.visible-lg-inline-block
  @media (min-width $screen-lg-min)
    display inline-block !important

.hidden-xs
  @media (max-width $screen-xs-max)
    responsive-invisibility()

.hidden-sm
  @media (min-width $screen-sm-min) and (max-width $screen-sm-max)
    responsive-invisibility()

.hidden-md
  @media (min-width $screen-md-min) and (max-width $screen-md-max)
    responsive-invisibility()

.hidden-lg
  @media (min-width $screen-lg-min)
    responsive-invisibility()


// Print utilities
//
// Media queries are placed on the inside to be mixin-friendly.

// Note Deprecated .visible-print as of v3.2.0
.visible-print
  responsive-invisibility()

  @media print
    responsive-visibility()

.visible-print-block
  display none !important

  @media print
    display block !important

.visible-print-inline
  display none !important

  @media print
    display inline !important

.visible-print-inline-block
  display none !important

  @media print
    display inline-block !important

.hidden-print
  @media print
    responsive-invisibility()


