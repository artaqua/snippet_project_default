// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$line-li-blue-name: 'line-li-blue';
$line-li-blue-x: 141px;
$line-li-blue-y: 224px;
$line-li-blue-offset-x: -141px;
$line-li-blue-offset-y: -224px;
$line-li-blue-width: 129px;
$line-li-blue-height: 1px;
$line-li-blue-total-width: 324px;
$line-li-blue-total-height: 264px;
$line-li-blue-image: '../images/sprites/sprite.png';
$line-li-blue: (141px, 224px, -141px, -224px, 129px, 1px, 324px, 264px, '../images/sprites/sprite.png', 'line-li-blue', );
$line-li-light-name: 'line-li-light';
$line-li-light-x: 141px;
$line-li-light-y: 240px;
$line-li-light-offset-x: -141px;
$line-li-light-offset-y: -240px;
$line-li-light-width: 129px;
$line-li-light-height: 1px;
$line-li-light-total-width: 324px;
$line-li-light-total-height: 264px;
$line-li-light-image: '../images/sprites/sprite.png';
$line-li-light: (141px, 240px, -141px, -240px, 129px, 1px, 324px, 264px, '../images/sprites/sprite.png', 'line-li-light', );
$logo-blue-name: 'logo-blue';
$logo-blue-x: 0px;
$logo-blue-y: 0px;
$logo-blue-offset-x: 0px;
$logo-blue-offset-y: 0px;
$logo-blue-width: 297px;
$logo-blue-height: 97px;
$logo-blue-total-width: 324px;
$logo-blue-total-height: 264px;
$logo-blue-image: '../images/sprites/sprite.png';
$logo-blue: (0px, 0px, 0px, 0px, 297px, 97px, 324px, 264px, '../images/sprites/sprite.png', 'logo-blue', );
$logo-light-name: 'logo-light';
$logo-light-x: 0px;
$logo-light-y: 112px;
$logo-light-offset-x: 0px;
$logo-light-offset-y: -112px;
$logo-light-width: 297px;
$logo-light-height: 97px;
$logo-light-total-width: 324px;
$logo-light-total-height: 264px;
$logo-light-image: '../images/sprites/sprite.png';
$logo-light: (0px, 112px, 0px, -112px, 297px, 97px, 324px, 264px, '../images/sprites/sprite.png', 'logo-light', );
$logo-mobile-name: 'logo-mobile';
$logo-mobile-x: 0px;
$logo-mobile-y: 224px;
$logo-mobile-offset-x: 0px;
$logo-mobile-offset-y: -224px;
$logo-mobile-width: 126px;
$logo-mobile-height: 40px;
$logo-mobile-total-width: 324px;
$logo-mobile-total-height: 264px;
$logo-mobile-image: '../images/sprites/sprite.png';
$logo-mobile: (0px, 224px, 0px, -224px, 126px, 40px, 324px, 264px, '../images/sprites/sprite.png', 'logo-mobile', );
$note-blue-name: 'note-blue';
$note-blue-x: 312px;
$note-blue-y: 0px;
$note-blue-offset-x: -312px;
$note-blue-offset-y: 0px;
$note-blue-width: 12px;
$note-blue-height: 23px;
$note-blue-total-width: 324px;
$note-blue-total-height: 264px;
$note-blue-image: '../images/sprites/sprite.png';
$note-blue: (312px, 0px, -312px, 0px, 12px, 23px, 324px, 264px, '../images/sprites/sprite.png', 'note-blue', );
$note-light-name: 'note-light';
$note-light-x: 312px;
$note-light-y: 38px;
$note-light-offset-x: -312px;
$note-light-offset-y: -38px;
$note-light-width: 12px;
$note-light-height: 23px;
$note-light-total-width: 324px;
$note-light-total-height: 264px;
$note-light-image: '../images/sprites/sprite.png';
$note-light: (312px, 38px, -312px, -38px, 12px, 23px, 324px, 264px, '../images/sprites/sprite.png', 'note-light', );
$spritesheet-width: 324px;
$spritesheet-height: 264px;
$spritesheet-image: '../images/sprites/sprite.png';
$spritesheet-sprites: ($line-li-blue, $line-li-light, $logo-blue, $logo-light, $logo-mobile, $note-blue, $note-light, );
$spritesheet: (324px, 264px, '../images/sprites/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
